{
  "Worker Page file": {
    "prefix": "snip-page-worker",
    "description": "1 placeholder",
    "scope": "typescriptreact",
    "body": [
      "import React from 'react'",
      "import { GetServerSideProps, GetServerSidePropsContext } from 'next'",
      "import { NoSsr } from '@material-ui/core'",
      "",
      "import { WorkerAppPage } from '@components/epic/app-worker/shared/worker-app-page/WorkerAppPage'",
      "import { SplashScreen } from '@components/generic/feedback/splash-screen/SplashScreen'",
      "",
      "const ${1:name}Page: React.FC = () => (",
      "  <NoSsr fallback={<SplashScreen />}>",
      "    <WorkerAppPage>",
      "      <$1 />",
      "    </WorkerAppPage>",
      "  </NoSsr>",
      ")",
      "",
      "export const getServerSideProps: GetServerSideProps = async (",
      "_: GetServerSidePropsContext",
      ") => {",
      "  return { props: {} }",
      "}",
      "",
      "export default $1Page"
    ]
  },
  "Admin Page file": {
    "prefix": "snip-page-admin",
    "description": "1 placeholder",
    "scope": "typescriptreact",
    "body": [
      "import React from 'react'",
      "import { GetServerSideProps, GetServerSidePropsContext } from 'next'",
      "import { NoSsr } from '@material-ui/core'",
      "",
      "import { AdminAppPage } from '@components/epic/app-admin/shared/admin-app-page/AdminAppPage'",
      "import { SplashScreen } from '@components/generic/feedback/splash-screen/SplashScreen'",
      "",
      "const ${1:name}Page: React.FC = () => (",
      "  <NoSsr fallback={<SplashScreen />}>",
      "    <AdminAppPage>",
      "      <$1 />",
      "    </AdminAppPage>",
      "  </NoSsr>",
      ")",
      "",
      "export const getServerSideProps: GetServerSideProps = async (",
      "_: GetServerSidePropsContext",
      ") => {",
      "  return { props: {} }",
      "}",
      "",
      "export default $1Page"
    ]
  },
  "Epic main component file": {
    "prefix": "snip-epic",
    "description": "1 placeholder",
    "scope": "typescriptreact",
    "body": [
      "import React from 'react'",
      "",
      "import { use${1:Name}Translations } from './$1.trans'",
      "import { use$1Styles } from './$1.styles'",
      "import { AppLayout } from '@components/generic/layout/app-layout/AppLayout'",
      "",
      "export const $1: React.FC = () => {",
      "  const classes = use$1Styles()",
      "  const {} = use$1Translations()",
      "",
      "  return (",
      "    <AppLayout>",
      "    </AppLayout>",
      "  )",
      "}"
    ]
  },
  "Component file": {
    "prefix": "snip-component",
    "description": "1 placeholder",
    "scope": "typescriptreact",
    "body": [
      "import React from 'react'",
      "",
      "interface ${1:Name}Props {",
      "",
      "}",
      "",
      "export const $1: React.FC<$1Props> = ({}) => {",
      "",
      "  return (",
      "    <>",
      "    </>",
      "  )",
      "}"
    ]
  },
  "Hook file": {
    "prefix": "snip-hook",
    "description": "1 placeholder",
    "scope": "typescript",
    "body": [
      "interface ${1:Name}Hook {",
      "",
      "}",
      "",
      "export const use$1 = (): $1Hook => {",
      "",
      "return {}",
      "}"
    ]
  },
  "Translations file": {
    "prefix": "snip-trans",
    "description": "3 placeholders",
    "scope": "typescript",
    "body": [
      "import { useLang } from '@components/generic/hooks/useLang'",
      "",
      "// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types",
      "export const use${1:Name}Translations = () => {",
      "  const { translate } = useLang()",
      "",
      "  const ${2:transName} = translate('${3:key}')",
      "",
      "  return { $2 }",
      "}"
    ]
  },
  "Styles file": {
    "prefix": "snip-styles",
    "description": "1 placeholder",
    "scope": "typescript",
    "body": [
      "import { makeStyles } from '@material-ui/core/styles'",
      "",
      "export const use${1:Name}Styles = makeStyles((theme) => ({",
      "  root: {},",
      "}))"
    ]
  },
  "Storybook file": {
    "prefix": "snip-story",
    "description": "2 placeholders",
    "scope": "typescriptreact",
    "body": [
      "import { Meta, Story } from '@storybook/react/types-6-0'",
      "",
      "const Template: Story<${1:Component}Props> = (args) => {",
      "  return <$1 {...args} />",
      "}",
      "",
      "export const Default = Template.bind({})",
      "Default.args = {}",
      "",
      "const meta: Meta = {",
      "  title: '${2:path}/$1',",
      "  component: $1,",
      "  argTypes: {}",
      "}",
      "",
      "export default meta"
    ]
  },
  "Storybook file (mobile viewport)": {
    "prefix": "snip-story-mobile",
    "description": "2 placeholders",
    "scope": "typescriptreact",
    "body": [
      "import { Meta, Story } from '@storybook/react/types-6-0'",
      "",
      "const Template: Story<${1:Component}Props> = (args) => {",
      "  return <$1 {...args} />",
      "}",
      "",
      "export const Default = Template.bind({})",
      "Default.args = {}",
      "",
      "const meta: Meta = {",
      "  title: '${2:path}/$1',",
      "  component: $1,",
      "  parameters: {",
      "    viewport: { defaultViewport: 'mobile2' },",
      "  },",
      "  argTypes: {}",
      "}",
      "",
      "export default meta"
    ]
  },
  "Storybook file (custom viewport)": {
    "prefix": "snip-story-custom",
    "description": "4 placeholders",
    "scope": "typescriptreact",
    "body": [
      "import { Meta, Story } from '@storybook/react/types-6-0'",
      "",
      "import { getCustomViewport } from './logic/getCustomViewport'",
      "",
      "const Template: Story<${1:Component}Props> = (args) => {",
      "  return <$1 {...args} />",
      "}",
      "",
      "export const Default = Template.bind({})",
      "Default.args = {}",
      "",
      "const meta: Meta = {",
      "  title: '${2:path}/$1',",
      "  component: $1,",
      "  parameters: {",
      "    viewport: getCustomViewport({",
      "      name: 'Conditional icon viewport',",
      "      width: ${3:414},",
      "      height: ${4:300},",
      "    }),",
      "  },",
      "  argTypes: {}",
      "}",
      "",
      "export default meta"
    ]
  },
  "API query call": {
    "prefix": "snip-api-query",
    "description": "3 placeholders",
    "scope": "typescript",
    "body": [
      "import { QueryObserverResult, useQuery } from 'react-query'",
      "",
      "import { axiosGet } from '@logic/axios/wrappers/axios.get.wrapper'",
      "",
      "import { ${2:URL} } from './config'",
      "",
      "export interface ${1:Name} {",
      "",
      "}",
      "",
      "export const use$1Query = (): QueryObserverResult<",
      "  $1",
      "> =>",
      "  useQuery(['${3:query-key}'], () =>",
      "    axiosGet<$1>($2)",
      ")"
    ]
  },
  "API mutation call": {
    "prefix": "snip-api-mutation",
    "description": "5 placeholders",
    "scope": "typescript",
    "body": [
      "import { useMutation, UseMutationResult } from 'react-query'",
      "",
      "import { axios${3:Post} } from '@logic/axios/wrappers/axios.${4:post}.wrapper'",
      "",
      "import { ${2:URL} } from './config'",
      "",
      "export interface ${1:Name}Input {",
      "",
      "}",
      "",
      "export const use$1Mutation = (): UseMutationResult<",
      "  ${5:result},",
      "  unknown,",
      "  $1Input",
      "> =>",
      "  useMutation((input: $1Input) =>",
      "    axios$3<$5>($2, input)",
      "  )"
    ]
  },
  "Mock API call": {
    "prefix": "snip-mock-api",
    "description": "5 placeholders",
    "scope": "typescript",
    "body": [
      "import { RequestHandler, rest } from 'msw'",
      "",
      "export const mock${1:Name}${2:Query} = (",
      "  data: ${5:DataType},",
      "  status = 200",
      "): RequestHandler =>",
      "  rest.${3:get}(${4:URL}, (_req, res, ctx) => {",
      "    return res(ctx.status(status), ctx.json(data))",
      "})"
    ]
  },
  "Hook test file": {
    "prefix": "snip-test-hook",
    "description": "3 placeholders",
    "scope": "typescript",
    "body": [
      "import { renderHook } from '@testing-library/react-hooks'",
      "",
      "import { use${1:HookName} } from './use$1'",
      "",
      "describe('use$1 hook', () => {",
      "  beforeEach(() => {",
      "    jest.clearAllMocks()",
      "  })",
      "",
      "  it('should ${3:first test name}', async () => {",
      "    const { result } = renderHook(() => use$1())",
      "",
      "  })",
      "})"
    ]
  },
  "Hook test file with query": {
    "prefix": "snip-test-hook-query",
    "description": "3 placeholders",
    "scope": "typescript",
    "body": [
      "import { renderHook } from '@testing-library/react-hooks'",
      "",
      "import { QueryProviderWrapper } from '@tests/wrappers/QueryProvider.wrapper'",
      "",
      "import { use${1:HookName} } from './use$1'",
      "",
      "describe('use$1 hook', () => {",
      "  const { wrapper, queryClient } = QueryProviderWrapper()",
      "",
      "  beforeEach(async () => {",
      "    await queryClient.resetQueries()",
      "    jest.clearAllMocks()",
      "  })",
      "",
      "  it('should ${3:first test name}', async () => {",
      "    const { result } = renderHook(() => use$1(), { wrapper })",
      "",
      "  })",
      "})"
    ]
  },
  "Component test file": {
    "prefix": "snip-test-component",
    "description": "2 placeholders",
    "scope": "typescriptreact",
    "body": [
      "import { render, screen } from '@testing-library/react'",
      "",
      "import { ThemeProviderWrapper } from '@tests/wrappers/ThemeProvider'",
      "",
      "import { ${1:ComponentName} } from './$1'",
      "",
      "describe('$1 component', () => {",
      "  const { wrapper } = ThemeProviderWrapper()",
      "",
      "  beforeEach(() => {",
      "    jest.clearAllMocks()",
      "  })",
      "",
      "  it('should ${2:first test}', () => {",
      "    render(<$1 />, { wrapper })",
      "  })",
      "})"
    ]
  }
}
